cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores <- c(all_scores, results$mean_absolute_error)
}
all_scores
# 4 fold cross validation
k = 4
indices <- sample(1:nrow(train_data))
folds <- cut(indices, breaks = k, labels = FALSE)
num_epochs <- 100
all_scores <- c()
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores <- c(all_scores, results$mean_absolute_error)
}
all_scores
mean(all_scores)
# saving the validation logs at each fold with 500 epochs
num_epochs <- 500
all_mae_histories <- NULL
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
history <- model %>% fit(
partial_train_data, partial_train_targets,
validation_data = list(val_data, val_targets),
epochs = num_epochs, batch_size = 1, verbose = 0
)
mae_history <- history$metrics$val_mean_absolute_error
all_mae_histories <- rbind(all_mae_histories, mae_history)
}
library(ggplot2)
ggplot(average_mae_history, aes(x = epoch, y = validation_mae)) + geom_line()
average_mae_history <- data.frame(
epoch = seq(1:ncol(all_mae_histories)),
validation_mae = apply(all_mae_histories, 2, mean)
)
# 4 fold cross validation
k = 4
indices <- sample(1:nrow(train_data))
folds <- cut(indices, breaks = k, labels = FALSE)
num_epochs <- 10
all_scores <- c()
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores <- c(all_scores, results$mean_absolute_error)
}
all_scores
mean(all_scores)
indices <- sample(1:nrow(train_data))
folds <- cut(1:length(indices), breaks = k, labels = FALSE)
num_epochs <- 10
all_scores <- c()
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores <- c(all_scores, results$mean_absolute_error)
}
all_scores
mean(all_scores)
results
all_scores = matrix(0, nrow = 1, ncol = k)
# 4 fold cross validation
k = 4
indices <- sample(1:nrow(train_data))
folds <- cut(1:length(indices), breaks = k, labels = FALSE)
num_epochs <- 3
all_scores = matrix(0, nrow = 1, ncol = k)
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores[1,i] = results$mean_absolute_error
}
results$mean_absolute_error
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores[1,i] = results$mae
}
all_scores
mean(all_scores)
num_epochs <- 100
all_scores = matrix(0, nrow = 1, ncol = k)
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
model %>% fit(partial_train_data, partial_train_targets,
epochs = num_epochs, batch_size = 1, verbose = 0)
results <- model %>% evaluate(val_data, val_targets, verbose = 0)
all_scores[1,i] = results$mae
}
all_scores
mean(all_scores)
# saving the validation logs at each fold with 500 epochs
num_epochs <- 500
all_mae_histories <- NULL
for (i in 1:k) {
cat("processing fold #", i, "\n")
val_indices <- which(folds == i, arr.ind = TRUE)
val_data <- train_data[val_indices,]
val_targets <- train_targets[val_indices]
partial_train_data <- train_data[-val_indices,]
partial_train_targets <- train_targets[-val_indices]
model <- build_model()
history <- model %>% fit(
partial_train_data, partial_train_targets,
validation_data = list(val_data, val_targets),
epochs = num_epochs, batch_size = 1, verbose = 0
)
mae_history <- history$metrics$val_mae
all_mae_histories <- rbind(all_mae_histories, mae_history)
}
average_mae_history <- data.frame(
epoch = seq(1:ncol(all_mae_histories)),
validation_mae = apply(all_mae_histories, 2, mean)
)
library(ggplot2)
ggplot(average_mae_history, aes(x = epoch, y = validation_mae)) + geom_line()
ggplot(average_mae_history, aes(x = epoch, y = validation_mae)) + geom_smooth()
model <- build_model()
model %>% fit(train_data, train_targets,
epochs = 80, batch_size = 16, verbose = 0)
result <- model %>% evaluate(test_data, test_targets)
result
my.name <- readline(prompt="Enter name: ")
# convert character into integer
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
my.name <- readline(prompt="Enter name: ")
my.age <- readline(prompt="Enter age: ")
# convert character into integer
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/Baruch_GA/2021_Spring_STA9890_StatisticalLearning")
# method2
library(ISLR)
ISLR::College
college = ISLR::College
I
College
install.packages("ISLR")
install.packages("ISLR")
college = ISLR::College
College
college
setwd("~/Documents/Baruch_GA/2021_Spring_STA9890_StatisticalLearning/homework1")
####################################
# 3(a)
# method1
college = read.csv('College.csv')
college
#####################################
# 3 (b)
college[,1]
college
View(college)
fix(college)
#####################################
# 3 (b)
rownames(college) = college[,1]
fix(college)
college[1,]
college[1,]
college[,1]
####################################
# 3(a)
# method1
college = read.csv('College.csv')
fix(college)
install.packages('XQuartz')
fix(college)
library('XQuartz')
sqAdd5ThenSqrt <- function(x){
+   x1 <- x^2
+   x2 <- x1+4
+   x3 <- sqrt(x2)
+   return(x3)
+ }
> sqAdd5ThenSqrt(0)
sqAdd5ThenSqrt = function(x){
+   x1 <- x^2
+   x2 <- x1+4
+   x3 <- sqrt(x2)
+   return(x3)
+ }
####################################
# 3(a)
# method1
college = read.csv('College.csv')
fix(college)
####################################
# 3(a)
# method1
college = read.csv('College.csv')
college
install.packages('XQuartz')
library('XQuartz')
#####################################
# 3 (b)
rownames(college) = college[,1]
fix(college)
view(college)
View(college)
college = college[,1]
fix(college)
fix(college)
View(college)
fix(college)
college = ISLR::College
#####################################
# 3 (b)
rownames(college) = college[,1]
####################################
# 3(a)
# method1
college = read.csv('College.csv')
#####################################
# 3 (b)
rownames(college) = college[,1]
fix(college)
View(college)
college = college[,-1]
fix(college)
View(college)
college = ISLR::College
college
#####################################
# 3 (b)
rownames(college) = college[,1]
#####################################
# 3 (c)
summary(college)
pairs(college)
pairs(college[,1:10])
# 8 (c) iii
plot(college$Outstate, college$Private)
# 8 (c) iii
plot(college$Private, college$Outstate)
# 8 (c) iv
Elite = rep("No", nrow(college))
Elite[college$Top10perc>50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
summary(college$Elite)
plot(college$Elite, college$Outstate)
# 8 (c) v
par(mfrow=c(2,2))
hist(college$Apps)
hist(college$perc.alumni, col=2)
hist(college$S.F.Ratio, col=3, breaks=10)
hist(college$Expend, breaks=100)
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$Top10perc)
# 8 (c) vi
par(mfrow=c(1,1))
plot(college$PhD, college$Enroll)
plot(college$PhD, college$Private)
plot(college$Private, college$PhD)
plot(college$Private, college$Expend)
# 8 (c) vi
par(mfrow=c(1,2))
plot(college$Private, college$Expend)
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio)
# 8 (c) v
par(mfrow=c(2,2))
#
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$Top10perc)
# 8 (c) vi
par(mfrow=c(1,2))
plot(college$Private, college$Expend)
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio)
par(mfrow=c(1,1))
plot(college$Outstate, college$Grad.Rate)
# High tuition correlates to high graduation rate.
plot(college$Accept / college$Apps, college$S.F.Ratio)
# Colleges with low acceptance rate tend to have low S:F ratio.
plot(college$Top10perc, college$Grad.Rate)
# 8 (c) vi
par(mfrow=c(1,1))
plot(college$Private, college$Expend)
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio)
par(mfrow=c(1,1))
plot(college$Outstate, college$Grad.Rate)
# High tuition correlates to high graduation rate.
plot(college$Accept / college$Apps, college$S.F.Ratio)
# Colleges with low acceptance rate tend to have low S:F ratio.
plot(college$Top10perc, college$Grad.Rate)
# Colleges with the most students from top 10% perc don't necessarily have
plot(college$Private, college$Expend, main = 'Instructional Expenditure')
plot(college$Private, college$Expend, main = 'Instructional Expenditure', xlab = 'Private School')
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio, main = 'Student/Faculty ratio', xlab = 'Private School')
# 8 (c) vi
par(mfrow=c(1,2))
plot(college$Private, college$Expend, main = 'Instructional Expenditure', xlab = 'Private School')
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio, main = 'Student/Faculty ratio', xlab = 'Private School')
####################################
# 8 (a)
college = read.csv('College.csv')
college
#####################################
# 8 (b)
rownames(college) = college[,1]
fix(college)
View(college)
college = college[,-1]
fix(college)
View(college)
# 8 (c) iii
plot(college$Private, college$Outstate)
#####################################
# 8 (c) i
summary(college)
# 8 (c) ii
pairs(college[,1:10])
# 8 (c) iii
plot(college$Private, college$Outstate)
# 8 (c) iv
Elite = rep("No", nrow(college))
Elite[college$Top10perc>50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
summary(college$Elite)
plot(college$Elite, college$Outstate)
# 8 (c) v
par(mfrow=c(2,2))
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$Top10perc)
# 8 (c) vi
par(mfrow=c(1,2))
plot(college$Private, college$Expend, main = 'Instructional Expenditure', xlab = 'Private School')
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio, main = 'Student/Faculty ratio', xlab = 'Private School')
# set as working directory
setwd("~/Documents/Baruch_GA/2021_Spring_STA9890_StatisticalLearning/homework1")
####################################
# 8 (a)
college = read.csv('College.csv')
college
#####################################
# 8 (b)
rownames(college) = college[,1]
fix(college)
View(college)
college = college[,-1]
fix(college)
View(college)
#####################################
# 8 (c) i
summary(college)
# 8 (c) ii
pairs(college[,1:10])
# 8 (c) iii
plot(college$Private, college$Outstate)
# 8 (c) iv
Elite = rep("No", nrow(college))
Elite[college$Top10perc>50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
summary(college$Elite)
plot(college$Elite, college$Outstate)
# 8 (c) v
par(mfrow=c(2,2))
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$Top10perc)
# 8 (c) vi
par(mfrow=c(1,2))
plot(college$Private, college$Expend, main = 'Instructional Expenditure', xlab = 'Private School')
# discovery 1: private school are expected to be expensive.
plot(college$Private, college$S.F.Ratio, main = 'Student/Faculty ratio', xlab = 'Private School')
####################################
# 8 (a)
college = read.csv('College.csv')
college
#####################################
# 8 (b)
rownames(college) = college[,1]
fix(college)
View(college)
college = college[,-1]
fix(college)
View(college)
#####################################
# 8 (c) i
summary(college)
# 8 (c) ii
pairs(college[,1:10])
# set as working directory
setwd("~/Documents/Baruch_GA/2021_Spring_STA9890_StatisticalLearning/homework1")
####################################
# 8 (a)
college = read.csv('College.csv')
college
#####################################
# 8 (b)
rownames(college) = college[,1]
fix(college)
View(college)
college = college[,-1]
fix(college)
View(college)
#####################################
# 8 (c) i
summary(college)
# 8 (c) ii
pairs(college[,1:10])
View(college)
####################################
# 8 (a)
college = read.csv('College.csv')
college
# 8 (c) ii
pairs(college[,1:10])
college =read.csv("~/ISLR/College.csv", stringsAsFactors=FALSE)
college =read.csv('College.csv', stringsAsFactors=FALSE)
# 8 (c) ii
pairs(college[,1:10])
college =read.csv('College.csv', stringsAsFactors=TRUE)
# 8 (c) ii
pairs(college[,1:10])
#####################################
# 8 (c) i
summary(college)
# 8 (c) ii
pairs(college[,1:10])
# 8 (c) iii
plot(college$Private, college$Outstate)
# 8 (c) ii
pairs(college[,1:10])
college =read.csv('College.csv', stringsAsFactors=TRUE)
# 8 (c) ii
pairs(college[,1:10])
college =read.csv('College.csv', stringsAsFactors=FALSE)
# 8 (c) ii
pairs(college[,1:10])
college =read.csv('College.csv', stringsAsFactors=TRUE)
# 8 (c) ii
pairs(college[,1:10])
